<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:Delight.Models">
            <summary>
            Static class for accessing the application models. References to models added through partial classes generated by the framework.
            </summary>
        </member>
        <member name="M:Delight.AssetManagementTest.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="T:Delight.BindingTest">
            <summary>
            Binding test view.
            </summary>
        </member>
        <member name="M:Delight.ModelBindingTest.AfterInitialize">
            <summary>
            Called once in the object's lifetime after construction of children and before load.
            </summary>
        </member>
        <member name="T:Delight.PerformanceTest">
            <summary>
            PerformanceTest view.
            </summary>
        </member>
        <member name="T:Delight.TestScene">
            <summary>
            TestScene view.
            </summary>
        </member>
        <member name="T:Delight.Assets">
            <summary>
            Main access point for all the assets used by the framework. 
            </summary>
            <summary>
            Contains references to asset bundle data.
            </summary>
        </member>
        <member name="T:Delight.AssetBundleData">
            <summary>
            AssetBundle data provider. Contains references to all asset bundles in the project.
            </summary>
            <summary>
            Asset bundle data provider. Contains all the asset bundles used by the framework.
            </summary>
        </member>
        <member name="T:Delight.MaterialAsset">
            <summary>
            Manages a UnityEngine.Material object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.MaterialAssetData">
            <summary>
            MaterialAsset data provider. Contains references to all materials in the project.
            </summary>
        </member>
        <member name="T:Delight.FontAsset">
            <summary>
            Manages a UnityEngine.Font object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.FontAssetData">
            <summary>
            FontAsset data provider. Contains references to all fonts in the project.
            </summary>
        </member>
        <member name="T:Delight.SpriteAsset">
            <summary>
            Manages a UnityEngine.Sprite object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.SpriteAssetData">
            <summary>
            SpriteAsset data provider. Contains references to all sprites in the project.
            </summary>
        </member>
        <member name="T:Delight.Texture2DAsset">
            <summary>
            Manages a UnityEngine.Texture2D object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.Texture2DAssetData">
            <summary>
            Texture2DAsset data provider. Contains references to all texture2ds in the project.
            </summary>
        </member>
        <member name="T:Delight.TMP_FontAsset">
            <summary>
            Manages a TMPro.TMP_FontAsset object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.TMP_FontAssetData">
            <summary>
            TMP_FontAsset data provider. Contains references to all tmp_fontassets in the project.
            </summary>
        </member>
        <member name="T:Delight.ShaderAsset">
            <summary>
            Manages a UnityEngine.Shader object. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="T:Delight.ShaderAssetData">
            <summary>
            ShaderAsset data provider. Contains references to all shaders in the project.
            </summary>
        </member>
        <member name="T:Delight.Config">
            <summary>
            Main access point for the configuration used by the framework.
            </summary>
        </member>
        <member name="T:Delight.SceneObjectView">
            <summary>
            Base class for all views that has a game object in the scene. 
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.AfterUnload">
            <summary>
            Called before the view is unloaded.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.IsActiveChanged">
            <summary>
            Called when IsActive property has been changed.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Awake">
            <summary>
            Called once when the script instance is being loaded if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Start">
            <summary>
            Called when the script instance is being enabled if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnEnable">
            <summary>
            Called when the script instance is being enabled if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.OnDisable">
            <summary>
            Called when script becomes disabled if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.LateUpdate">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.FixedUpdate">
            <summary>
            Frame-rate independent update called if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.Ignore">
            <summary>
            Sets view to be ignored (must be called before load). Ignored objects are disabled/ignored in the object hierarchy (but their children aren't).
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StartCoroutine(System.String)">
            <summary>
            Starts a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopCoroutine(System.String)">
            <summary>
            Stops a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops a coroutine.
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StopAllCoroutines">
            <summary>
            Stops all co-routines. 
            </summary>
        </member>
        <member name="M:Delight.SceneObjectView.StartCoroutine(System.String,System.Object)">
            <summary>
            Starts a coroutine.
            </summary>
        </member>
        <member name="P:Delight.SceneObjectView.Name">
            <summary>
            Name of the scene view game object.
            </summary>
        </member>
        <member name="T:Delight.UnityScriptRelay">
            <summary>
            Simple unity component that relays script events (Awake, Update, etc) to scene view.
            </summary>
        </member>
        <member name="T:Delight.Button">
            <summary>
            The button view is a clickable region with text. Has the additional states: Highlighted, Pressed and Disabled. The button can be set to toggle through IsToggleButton and to adjust its size to its text through the AutoSize field.
            </summary>
        </member>
        <member name="P:Delight.Button.TogglePressed">
            <summary>
            Gets value indicating if button is a toggle button and is pressed.
            </summary>
        </member>
        <member name="M:Delight.Button.AfterInitialize">
            <summary>
            Called once in the object's lifetime after construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.Button.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Button.ToggleValueChanged">
            <summary>
            Called when toggle value changes.
            </summary>
        </member>
        <member name="M:Delight.Button.Label_PropertyChanged(System.Object,System.String)">
            <summary>
            Called when property on button label is changed.
            </summary>
        </member>
        <member name="M:Delight.Button.TextChanged">
            <summary>
            Called when label text changes.
            </summary>
        </member>
        <member name="M:Delight.Button.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.Button.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseClick">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseEnter">
            <summary>
            Called when mouse enters.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseExit">
            <summary>
            Called when mouse exits.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseDown">
            <summary>
            Called when mouse down.
            </summary>
        </member>
        <member name="M:Delight.Button.ButtonMouseUp">
            <summary>
            Called when mouse up.
            </summary>
        </member>
        <member name="M:Delight.Button.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.Button.IsDisabledChanged">
            <summary>
            Called when the button is disabled/enabled.
            </summary>
        </member>
        <member name="M:Delight.Button.OnDisable">
            <summary>
            Called when the button is disabled.
            </summary>
        </member>
        <member name="M:Delight.Button.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="T:Delight.CheckBox">
            <summary>
            A check box view consisting of a box that can be ticked and a text label.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.CheckBox.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.OnCheckBoxChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.CheckBox.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.IsCheckedChanged">
            <summary>
            Called when the field IsChecked is changed.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.CheckBoxClick">
            <summary>
            Called when check box is clicked.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.CheckBox.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="T:Delight.Collection">
            <summary>
            Generic collection view. Used by views such as Lists and TabPanel that wants to display dynamic content through the Item property.
            </summary>
        </member>
        <member name="M:Delight.Collection.CreateItem(Delight.BindableObject,System.Type,System.String)">
            <summary>
            Creates new item in collection.
            </summary>
        </member>
        <member name="M:Delight.Collection.GetContentTemplate(System.Type,System.String)">
            <summary>
            Gets content template of the specified type and id. 
            </summary>
        </member>
        <member name="T:Delight.ComboBox">
            <summary>
            Presents a static or dynamic list of items in a drop-down.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.ComboBox.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.IsDropUpChanged">
            <summary>
            Called when IsDropUp field changes.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.ComboBoxButtonClick(Delight.Button)">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:Delight.ComboBox.ComboBoxListSelectionChanged(Delight.List,Delight.ItemSelectionActionData)">
            <summary>
            Called when combo box list selection changes.
            </summary>
        </member>
        <member name="T:Delight.Frame">
            <summary>
            View that resizes itself to its content by default.
            </summary>
        </member>
        <member name="M:Delight.Frame.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Frame.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.Frame.OnFrameChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Frame.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.Frame.AdjustSizeToContent">
            <summary>
            Adjusts the size of the list item to its content. 
            </summary>
        </member>
        <member name="T:Delight.LayoutGrid">
            <summary>
            View that displays static content in a grid layout (note has the alias Grid in XML). 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.AfterLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.Update">
            <summary>
            Called once per frame if EnableScriptEvents is true.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.UpdateLayout(System.Boolean)">
            <summary>
            Updates the layout of the grid. 
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.GetColumnDefinition(Delight.UIView)">
            <summary>
            Gets column definition for the specified view.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.GetRowDefinition(Delight.UIView)">
            <summary>
            Gets row definition for the specified view.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.UpdateRowAndColumnDefinitions">
            <summary>
            Updates row and column definition sizes and offsets based on grid size.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.CellChanged">
            <summary>
            Called when the cell index or span of a child has been changed.
            </summary>
        </member>
        <member name="M:Delight.LayoutGrid.OnCellChanged">
            <summary>
            Called when the cell index or span of a child has been changed. 
            </summary>
        </member>
        <member name="T:Delight.RowDefinitions">
            <summary>
            List of row definitions.
            </summary>
        </member>
        <member name="T:Delight.ColumnDefinitions">
            <summary>
            List of column definitions.
            </summary>
        </member>
        <member name="T:Delight.RowDefinition">
            <summary>
            Contains information about a row in the grid.
            </summary>
        </member>
        <member name="T:Delight.ColumnDefinition">
            <summary>
            Contains information about a column in the grid.
            </summary>
        </member>
        <member name="T:Delight.CellIndex">
            <summary>
            Represents cell index (row, column).
            </summary>
        </member>
        <member name="T:Delight.Group">
            <summary>
            The group is used to spacially arrange child views next to each other either horizontally or vertically based on the Orientation property.
            </summary>
        </member>
        <member name="M:Delight.Group.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.Group.OnGroupChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Group.UpdateLayout(System.Boolean)">
            <summary>
            Updates the layout of the group. 
            </summary>
        </member>
        <member name="T:Delight.Image">
            <summary>
            View that displays an image sprite. Based on the UGUI ImageComponent. Adjusts its size and image type (spliced, etc) to the native sprite if not explicitly set.
            </summary>
        </member>
        <member name="M:Delight.Image.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Image.SpriteChanged">
            <summary>
            Called when the sprite is changed. 
            </summary>
        </member>
        <member name="M:Delight.Image.ImageChanged">
            <summary>
            Called whenever properties affecting the image are changed. 
            </summary>
        </member>
        <member name="M:Delight.Image.FastMaterialChanged">
            <summary>
            Called whenever the UI fast default material has been loaded/changed.
            </summary>
        </member>
        <member name="T:Delight.InputField">
            <summary>
            Interactable input field enabling user to type single or multi-line text.
            </summary>
        </member>
        <member name="M:Delight.InputField.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.InputField.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.InputField.AfterChildrenLoaded">
            <summary>
            Called just after the children are loaded, but before dependency properties are loaded.
            </summary>
        </member>
        <member name="M:Delight.InputField.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.InputField.TextChanged">
            <summary>
            Called when the input text is changed.
            </summary>
        </member>
        <member name="M:Delight.InputField.InputFieldEndEdit(System.String)">
            <summary>
            Called on input field end edit.
            </summary>
        </member>
        <member name="M:Delight.InputField.InputFieldValueChanged(System.String)">
            <summary>
            Called when input field value has been updated.
            </summary>
        </member>
        <member name="M:Delight.InputField.UpdatePlaceholder">
            <summary>
            Shows or hides placeholder based on text.
            </summary>
        </member>
        <member name="T:Delight.Label">
            <summary>
            Presents text. Based on the UGUI text component.
            </summary>
        </member>
        <member name="M:Delight.Label.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Label.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Label.Update">
            <summary>
            When AutoSize adjust size of label to content size fitter.
            </summary>
        </member>
        <member name="M:Delight.Label.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.Label.FontChanged">
            <summary>
            Enables font when loaded.
            </summary>
        </member>
        <member name="M:Delight.Label.TextChanged">
            <summary>
            Called when label text changes.
            </summary>
        </member>
        <member name="T:Delight.LayoutRoot">
            <summary>
            Represents a layout root canvas under which all UI views must reside.
            </summary>
        </member>
        <member name="M:Delight.LayoutRoot.LateUpdate">
            <summary>
            Updates the view. Called once each frame. 
            </summary>
        </member>
        <member name="M:Delight.LayoutRoot.RegisterChangeHandler(Delight.View.ChangeHandler)">
            <summary>
            Registers a change handler to be triggered on next late update.
            </summary>
        </member>
        <member name="T:Delight.List">
            <summary>
            The list presents a static or dynamic list of items. The list can be set to be scrollable through the IsScrollable property. items can be made selectable. Items can be arranged vertically or horizontally. The items can overflow or be wrapped to create flowing lists.
            </summary>
        </member>
        <member name="M:Delight.List.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.List.CreateItems">
            <summary>
            Generates views from data in collection. 
            </summary>
        </member>
        <member name="M:Delight.List.AfterInitialize">
            <summary>
            Called during initialization. 
            </summary>
        </member>
        <member name="M:Delight.List.ContentScrolled">
            <summary>
            Called for virtualized lists to update the realized items.
            </summary>
        </member>
        <member name="M:Delight.List.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.List.AfterUnload">
            <summary>
            Called when the view has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.List.OnCollectionChanged(System.Object,Delight.CollectionChangedEventArgs)">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:Delight.List.OnCollectionChanged(Delight.CollectionChangedEventArgs)">
            <summary>
            Handles collection changed events.
            </summary>
        </member>
        <member name="M:Delight.List.ScrollTo(System.Int32,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Scrolls to specified item.
            </summary>
        </member>
        <member name="M:Delight.List.GetVirtualItem(Delight.BindableObject)">
            <summary>
            Gets virtual item from bindable item.
            </summary>
        </member>
        <member name="M:Delight.List.ScrollTo(Delight.BindableObject,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Scrolls to specified item.
            </summary>
        </member>
        <member name="M:Delight.List.ReplaceItems">
            <summary>
            Replaces presented items. 
            </summary>
        </member>
        <member name="M:Delight.List.DestroyItem(Delight.BindableObject)">
            <summary>
            Destroys item in list.
            </summary>
        </member>
        <member name="M:Delight.List.ItemsChanged">
            <summary>
            Called when the list of items has been replaced.
            </summary>
        </member>
        <member name="M:Delight.List.ClearItems">
            <summary>
            Clears the list. 
            </summary>
        </member>
        <member name="M:Delight.List.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.List.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.List.OnListChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.List.CreateListItem(Delight.BindableObject)">
            <summary>
            Called when a new dynamic list item is to be generated.
            </summary>
        </member>
        <member name="M:Delight.List.UpdateLayout(System.Boolean)">
            <summary>
            Updates the layout of the group. 
            </summary>
        </member>
        <member name="M:Delight.List.UpdateRealizedItems">
            <summary>
            Updates realized items.
            </summary>
        </member>
        <member name="M:Delight.List.UnrealizeItem(Delight.VirtualItem)">
            <summary>
            Unrealizes virtual item.
            </summary>
        </member>
        <member name="M:Delight.List.RealizeItem(Delight.VirtualItem)">
            <summary>
            Realizes virtual item.
            </summary>
        </member>
        <member name="M:Delight.List.CreateRealizedListItem(Delight.VirtualItem)">
            <summary>
            Creates new realized list item from virtual item.
            </summary>
        </member>
        <member name="M:Delight.List.IsVirtualItemInViewport(Delight.VirtualItem)">
            <summary>
            Returns true if the virtual item is visible in the viewport.
            </summary>
        </member>
        <member name="M:Delight.List.UpdateLayoutOverflow">
            <summary>
            Updates layout in overflowing lists (default).
            </summary>
        </member>
        <member name="M:Delight.List.UpdateLayoutWrapped">
            <summary>
            Updates layout in wrapped lists.
            </summary>
        </member>
        <member name="M:Delight.List.SelectAndScrollToItem(Delight.BindableObject,System.Nullable{Delight.ElementAlignment},Delight.ElementMargin)">
            <summary>
            Selects item and scrolls to it.
            </summary>
        </member>
        <member name="M:Delight.List.SelectItem(Delight.BindableObject,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.List.SelectItem(Delight.ListItem,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.List.SetSelected(Delight.ListItem,System.Boolean)">
            <summary>
            Selects or deselects a list item.
            </summary>
        </member>
        <member name="M:Delight.List.SelectVirtualItem(Delight.VirtualItem,System.Boolean)">
            <summary>
            Selects item in the list.
            </summary>
        </member>
        <member name="M:Delight.List.SetSelectedVirtual(Delight.VirtualItem,System.Boolean)">
            <summary>
            Selects or deselects a list item.
            </summary>
        </member>
        <member name="M:Delight.List.DeselectAll">
            <summary>
            Deselects all items.
            </summary>
        </member>
        <member name="M:Delight.List.GetSelected``1">
            <summary>
            Gets selected item of type.
            </summary>
        </member>
        <member name="M:Delight.List.CheckCanDeselect">
            <summary>
            Checks if an item can be deselected. 
            </summary>
        </member>
        <member name="M:Delight.List.CreateStaticListItems">
            <summary>
            Generates static list items.
            </summary>
        </member>
        <member name="M:Delight.List.UnblockListItemDragEvents(Delight.ListItem)">
            <summary>
            Unblocks drag events from list items, which makes it so draggable items don't block the list from being scrolled.
            </summary>
        </member>
        <member name="P:Delight.List.ScrollsHorizontally">
            <summary>
            Returns boolean indicating if list scrolls horizontally. 
            </summary>
        </member>
        <member name="T:Delight.ListItem">
            <summary>
            Base view for items displayed within the List view. Has the extra states: Disabled, Highlighted, Pressed and Selected. 
            </summary>
        </member>
        <member name="P:Delight.ListItem.ParentList">
            <summary>
            Parent list the item resides in.
            </summary>
        </member>
        <member name="P:Delight.ListItem.DefaultItemStyle">
            <summary>
            Returns default item style.
            </summary>
        </member>
        <member name="M:Delight.ListItem.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.ListItem.AfterInitialize">
            <summary>
            Called once in the object's lifetime after construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.ListItem.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.ListItem.OnListItemChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.ListItem.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.ListItem.AdjustSizeToContent">
            <summary>
            Adjusts the size of the list item to its content. 
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseClick">
            <summary>
            Called when mouse is clicked.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseEnter">
            <summary>
            Called when mouse enters.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseExit">
            <summary>
            Called when mouse exits.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseDown">
            <summary>
            Called when mouse down.
            </summary>
        </member>
        <member name="M:Delight.ListItem.ListItemMouseUp">
            <summary>
            Called when mouse up.
            </summary>
        </member>
        <member name="M:Delight.ListItem.IsSelectedChanged">
            <summary>
            Called when the IsSelected field changes.
            </summary>
        </member>
        <member name="T:Delight.Mask">
            <summary>
            A view that masks any content using the background sprite and color as mask.
            </summary>
        </member>
        <member name="M:Delight.Mask.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="T:Delight.RadioButton">
            <summary>
            Presents a one-of-many selection option. If multiple radio buttons shares the same parent only one is selected at a time.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.RadioButton.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.OnRadioButtonChildLayoutChanged">
            <summary>
            Called when the layout of a child has been changed. 
            </summary>
        </member>
        <member name="M:Delight.RadioButton.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.IsCheckedChanged">
            <summary>
            Called when the field IsChecked is changed.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.IsDisabledChanged">
            <summary>
            Called when IsDisabled field changes.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.RadioButtonClick">
            <summary>
            Called when radio button is clicked.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.RadioButton.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="T:Delight.RectMask2D">
            <summary>
            A view that masks any content using the background sprite and color as mask. Based on RectMask2D component which has better performance than the regular mask.
            </summary>
        </member>
        <member name="M:Delight.RectMask2D.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="T:Delight.Region">
            <summary>
            View used primarily to section off a region of space in order to spacially arrange child views. Has 100% size by default.
            </summary>
        </member>
        <member name="T:Delight.ScrollableRegion">
            <summary>
            Presents scrollable content with optional scrollbars. Behaves similar to the UGUI Panel component. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.Update">
            <summary>
            Called once per frame.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.AfterUnload">
            <summary>
            Called after the view has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.IsOutOfBounds(UnityEngine.Vector2,System.Boolean@,System.Boolean@)">
            <summary>
            Returns true if content offset is out of bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.IsOutOfBounds(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Boolean@,System.Boolean@)">
            <summary>
            Returns true if content offset is out of bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.ResetVelocityIfOutOfBounds(UnityEngine.Vector2)">
            <summary>
            Resets velocity if out of bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetBounds(UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Get bounds. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.ChildLayoutChanged">
            <summary>
            Called when a child changes its layout.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.AdjustContentRegionSizeToChildren">
            <summary>
            Updates the size of the content region. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.Ignore">
            <summary>
            Sets view to be ignored (must be called before load). Ignored objects are disabled/ignored in the object hierarchy (but their children aren't).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnBeginDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is starting to be dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnEndDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is stopped being dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnInitializePotentialDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is potentially started to be dragged.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.OnScroll(Delight.DependencyObject,System.Object)">
            <summary>
            Called when the content is scrolled using mouse wheel or track pad.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetClampedOffset(UnityEngine.Vector2)">
            <summary>
            Gets offset clamped to bounds.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetElasticOffset(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Gets elastic offset.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.UnblockDragEvents">
            <summary>
            Makes it so draggable child views aren't blocking the region from being dragged. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.UnblockDragEvents(Delight.SceneObjectView)">
            <summary>
            Makes it so a draggable child view isn't blocking the region from being dragged. 
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.RubberDelta(System.Single,System.Single)">
            <summary>
            Calculate rubber delta.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.GetContentOffset">
            <summary>
            Gets current content offset as vector.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetContentOffset(UnityEngine.Vector2)">
            <summary>
            Sets content offset as vector.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.UpdateScrollbars">
            <summary>
            Updates scrollbars based on content offset.
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetScrollPosition(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets normalized scroll position (0-1 where 0.5 is scrolled half-way).
            </summary>
        </member>
        <member name="M:Delight.ScrollableRegion.SetAbsoluteScrollPosition(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets absolute scroll position in pixels (from 0 to size of scrollable content).
            </summary>
        </member>
        <member name="P:Delight.ScrollableRegion.NormalizedPosition">
            <summary>
            Gets or sets normalized scroll position. TODO make into dependency property so we can bind to it. 
            </summary>
        </member>
        <member name="T:Delight.Scrollbar">
            <summary>
            A scrollbar with a draggable handle. Used by the ScrollableRegion view. 
            </summary>
        </member>
        <member name="M:Delight.Scrollbar.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Scrollbar.SetScrollPosition(System.Single,System.Nullable{System.Single})">
            <summary>
            Sets scroll position. 
            </summary>
        </member>
        <member name="T:Delight.Slider">
            <summary>
            Slider with a handle that can be moved with the mouse. Can be oriented horizontally or vertically.
            </summary>
        </member>
        <member name="M:Delight.Slider.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.Slider.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderValueChanged">
            <summary>
            Called when the value of the slider changes (or any fields affecting the value).
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderBeginDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on slider drag begin.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderEndDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on slider drag end.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on slider drag.
            </summary>
        </member>
        <member name="M:Delight.Slider.SliderInitializePotentialDrag(Delight.DependencyObject,System.Object)">
            <summary>
            Called on potential drag begin (click).
            </summary>
        </member>
        <member name="M:Delight.Slider.SlideTo(System.Single)">
            <summary>
            Sets slider value.
            </summary>
        </member>
        <member name="M:Delight.Slider.SetSlideTo(UnityEngine.EventSystems.PointerEventData,System.Boolean)">
            <summary>
            Slides the slider to the given position.
            </summary>
        </member>
        <member name="M:Delight.Slider.Nearest(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Snaps to nearest value based on number of steps.
            </summary>
        </member>
        <member name="M:Delight.Slider.UpdateSliderPosition(System.Single)">
            <summary>
            Sets slider position based on value.
            </summary>
        </member>
        <member name="T:Delight.Tab">
            <summary>
            Base views for tab content displayed within the TabPanel.
            </summary>
        </member>
        <member name="T:Delight.TabHeader">
            <summary>
            Base view for tab headers displayed by the TabPanel.
            </summary>
        </member>
        <member name="P:Delight.TabHeader.ParentTabPanel">
            <summary>
            Parent tab panel the tab header resides in.
            </summary>
        </member>
        <member name="T:Delight.TabPanel">
            <summary>
            Arranges content in a series of tabs that can be switched between. Tabs can be oriented horizontallt/vertically and aligned topleft/bottom/etc. Tabs and headers can be static or generated dynamically.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.SelectedTabIndexChanged">
            <summary>
            Called when selected tab index is changed.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateTabItems">
            <summary>
            Generates tab items from data in collection. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.AfterUnload">
            <summary>
            Called when the view has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.OnCollectionChanged(System.Object,Delight.CollectionChangedEventArgs)">
            <summary>
            Called when the list of items has been changed.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.OnCollectionChanged(Delight.CollectionChangedEventArgs)">
            <summary>
            Handles collection changed events.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.ReplaceItems">
            <summary>
            Replaces presented items. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.DestroyItem(Delight.BindableObject)">
            <summary>
            Destroys item in list.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.ItemsChanged">
            <summary>
            Called when the list of items has been replaced.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.ClearTabItems">
            <summary>
            Clears the list. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateTabItem(Delight.BindableObject)">
            <summary>
            Called when a new item is to be generated.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateStaticTabItems">
            <summary>
            Generates views from data in collection. 
            </summary>
        </member>
        <member name="M:Delight.TabPanel.CreateTabHeader(Delight.Tab,Delight.BindableObject)">
            <summary>
            Creates tab header for tab.
            </summary>
        </member>
        <member name="M:Delight.TabPanel.SelectTab(System.Int32)">
            <summary>
            Switches to the specified tab.
            </summary>
        </member>
        <member name="T:Delight.ToggleGroup">
            <summary>
            Group view that makes its child buttons into toggle buttons and ensures only one is toggled at a time.
            </summary>
        </member>
        <member name="T:Delight.UICanvas">
            <summary>
            The canvas view is used to render UI components and controls things like draw sort order, scaling and render mode. Can also be used to reduce draw calls by sectioning off portion of the UI (i.e. that changes a lot) into a separate canvas.
            </summary>
        </member>
        <member name="T:Delight.UIImageView">
            <summary>
            Base class for views that has a background sprite and color. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.UIImageView.SpriteChanged">
            <summary>
            Called when the sprite is changed. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.ImageChanged">
            <summary>
            Called whenever properties affecting the image are changed. 
            </summary>
        </member>
        <member name="M:Delight.UIImageView.BackgroundIsVisible">
            <summary>
            Returns boolean indicating if background is visible.
            </summary>
        </member>
        <member name="M:Delight.UIImageView.FastMaterialChanged">
            <summary>
            Called whenever the UI fast default material has been loaded/changed.
            </summary>
        </member>
        <member name="T:Delight.UIView">
            <summary>
            Base class for UI views. Has properties for doing layout: Width, Height, Margin, Alignment and Offset.
            </summary>
        </member>
        <member name="M:Delight.UIView.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.UIView.OnChanged(System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterUnload">
            <summary>
            Called after the view is unloaded.
            </summary>
        </member>
        <member name="M:Delight.UIView.SizeChanged">
            <summary>
            Called when size of the view has been changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.OnSizeChanged">
            <summary>
            Called when size of the view has been changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.OffsetChanged">
            <summary>
            Called when a property affecting the offset of the view has been changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterInitiatedLoad">
            <summary>
            Called when after the top-most load is called. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.UIView.AfterInitiatedUnload">
            <summary>
            Called when after the top-most unload is called. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.UIView.UpdateLayout(System.Boolean)">
            <summary>
            Updates layout.
            </summary>
        </member>
        <member name="M:Delight.UIView.NotifyParentOfChildLayoutChanged">
            <summary>
            Notifies parent that the layout of a child has been updated.
            </summary>
        </member>
        <member name="M:Delight.UIView.ChildLayoutChanged">
            <summary>
            Called if a child has changed its layout. 
            </summary>
        </member>
        <member name="M:Delight.UIView.UpdateRectTransform">
            <summary>
            Updates rect transform. 
            </summary>
        </member>
        <member name="M:Delight.UIView.VisibilityChanged">
            <summary>
            Called when the visibility of the view has changed. 
            </summary>
        </member>
        <member name="M:Delight.UIView.GetCanvasGroup">
            <summary>
            Gets canvas group (adds it to the view if it doesn't exist).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Delight.UIView.SetSize(System.Single,System.Single)">
            <summary>
            Sets size of view in pixels.
            </summary>
        </member>
        <member name="M:Delight.UIView.FastMaterialChanged">
            <summary>
            Called whenever the UI fast default material has been loaded/changed.
            </summary>
        </member>
        <member name="M:Delight.UIView.ContainsMouse(UnityEngine.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Tests if mouse is over this view. 
            </summary>
        </member>
        <member name="P:Delight.UIView.ActualWidth">
            <summary>
            Gets actual width of view in pixels. Useful when Width may be specified as percentage and you want actual pixel width.
            </summary>
        </member>
        <member name="P:Delight.UIView.ActualHeight">
            <summary>
            Gets actual height of view in pixels. Useful when Height may be specified as percentage and you want actual pixel height.
            </summary>
        </member>
        <member name="P:Delight.UIView.IsFullScreen">
            <summary>
            Gets boolean indicating if view takes up the entire screen.
            </summary>
        </member>
        <member name="T:Delight.ViewSwitcher">
            <summary>
            Provides logic for switching between mutliple child views and displaying one at a time. By default the views are loaded when they are displayed, behavior can be changed through the SwitchMode property. 
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.BeforeLoad">
            <summary>
            Called before the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.AfterLoad">
            <summary>
            Called after the view is loaded.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.SwitchTo(System.Int32)">
            <summary>
            Switches to view at index.
            </summary>
        </member>
        <member name="M:Delight.ViewSwitcher.SwitchTo(Delight.View)">
            <summary>
            Switches to the view specified.
            </summary>
        </member>
        <member name="T:Delight.View">
            <summary>
            Base class for all views in the framework.
            </summary>
        </member>
        <member name="M:Delight.View.#ctor(Delight.View,Delight.View,System.String,Delight.Template,System.Action{Delight.View})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="P:Delight.View.Parent">
            <summary>
            Gets view parent.
            </summary>
        </member>
        <member name="P:Delight.View.LayoutParent">
            <summary>
            Gets or sets layout parent.
            </summary>
        </member>
        <member name="P:Delight.View.ContentContainer">
            <summary>
            Gets or sets content container.
            </summary>
        </member>
        <member name="P:Delight.View.Content">
            <summary>
            Gets content container.
            </summary>
        </member>
        <member name="P:Delight.View.LayoutChildren">
            <summary>
            Gets or sets layout children.
            </summary>
        </member>
        <member name="P:Delight.View.IsLoaded">
            <summary>
            Gets boolean indicating if view is loaded.
            </summary>
        </member>
        <member name="P:Delight.View.Bindings">
            <summary>
            Gets list of bindings.
            </summary>
        </member>
        <member name="M:Delight.View.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
        </member>
        <member name="M:Delight.View.OnChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
        </member>
        <member name="M:Delight.View.BeforeInitialize">
            <summary>
            Called once in the object's lifetime before construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.View.AfterInitialize">
            <summary>
            Called once in the object's lifetime after construction of children and before load.
            </summary>
        </member>
        <member name="M:Delight.View.LoadAsync">
            <summary>
            Loads the view asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.View.LoadAsyncInternal(System.Boolean)">
            <summary>
            Loads the view asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.View.Load">
            <summary>
            Loads the view. Called when load is initiated from an external source.
            </summary>
        </member>
        <member name="M:Delight.View.LoadInternal(System.Boolean)">
            <summary>
            Loads the view. Called internally. 
            </summary>
        </member>
        <member name="M:Delight.View.BeforeLoad">
            <summary>
            Called just before the view and its children are loaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterChildrenLoaded">
            <summary>
            Called just after the children are loaded, but before dependency properties are loaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterLoad">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.View.Initialize">
            <summary>
            Called after the view and its children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterInitiatedLoad">
            <summary>
            Called after the top-most view who initiated the load, has been loaded. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.View.AfterInitiatedUnload">
            <summary>
            Called after the top-most view who initiated the unload, has been unloaded. Used to update parents.
            </summary>
        </member>
        <member name="M:Delight.View.UpdateBindings">
            <summary>
            Updates bindings after children has been loaded.
            </summary>
        </member>
        <member name="M:Delight.View.UpdateBindings(Delight.DependencyObject)">
            <summary>
            Updates bindings to specific target object.
            </summary>
        </member>
        <member name="M:Delight.View.UpdateParentBindings">
            <summary>
            Updates bindings to this view in parent. 
            </summary>
        </member>
        <member name="M:Delight.View.LoadDependencyProperties">
            <summary>
            Loads dependency properties. 
            </summary>
        </member>
        <member name="M:Delight.View.LoadDependencyPropertiesAsync">
            <summary>
            Loads dependency asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.View.Unload">
            <summary>
            Unloads the view.
            </summary>
        </member>
        <member name="M:Delight.View.UnloadInternal">
            <summary>
            Unloads the view.
            </summary>
        </member>
        <member name="M:Delight.View.UnloadDependencyProperties">
            <summary>
            Unloads dependency properties. 
            </summary>
        </member>
        <member name="M:Delight.View.BeforeUnload">
            <summary>
            Called just before the view and its children are unloaded.
            </summary>
        </member>
        <member name="M:Delight.View.AfterUnload">
            <summary>
            Called after the view and its children has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.View.Destroy">
            <summary>
            Unloads the view and removes it from layout parent. 
            </summary>
        </member>
        <member name="M:Delight.View.MoveTo(Delight.View)">
            <summary>
            Moves view to another layout parent. 
            </summary>
        </member>
        <member name="M:Delight.View.SetState(System.String)">
            <summary>
            Sets the state of the view.
            </summary>
        </member>
        <member name="M:Delight.View.GetStateChangingProperties(System.String)">
            <summary>
            Gets list of state changing properties.
            </summary>
        </member>
        <member name="M:Delight.View.PrepareForDesigner">
            <summary>
            Called by designer to make the view presentable in the designer.
            </summary>
        </member>
        <member name="T:Delight.ActionData">
            <summary>
            Base class for data passed by view actions to handlers.
            </summary>
        </member>
        <member name="T:Delight.Aliases">
            <summary>
            Aliases used when parsing views.
            </summary>
        </member>
        <member name="T:Delight.AssetBundle">
            <summary>
            Base class for asset bundles. Loads/unloads the bundle on-demand as it's requested by views.
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.#ctor">
            <summary>
            Initializes a new instance of the class. 
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.RegisterReference(System.Object)">
            <summary>
            Registers load object. 
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.UnregisterReference(System.Object)">
            <summary>
            Registers load object. 
            </summary>
        </member>
        <member name="M:Delight.AssetBundle.LoadAsync">
            <summary>
            Loads the asset bundle asynchronously, returns the loaded object.
            </summary>
        </member>
        <member name="T:Delight.AssetObject">
            <summary>
            Base class for unity asset object managers. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.RegisterReference(System.Object)">
            <summary>
            Registers that an object references the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.RegisterReferenceAsync(System.Object)">
            <summary>
            Registers that an object references the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.UnregisterReference(System.Object)">
            <summary>
            Unregisters an object from referencing the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.Load">
            <summary>
            Loads asset synchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject.LoadGenericAsync">
            <summary>
            Loads the asset asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject.Unload">
            <summary>
            Unloads the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject.GetUnityObject">
            <summary>
            Gets unity object.
            </summary>
        </member>
        <member name="T:Delight.AssetObject`1">
            <summary>
            Generic base class for unity asset object managers. Loads/unloads the asset on-demand as it's requested by views.
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.Load">
            <summary>
            Load the asset synchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.LoadGenericAsync">
            <summary>
            Loads the asset asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.LoadAsync">
            <summary>
            Loads the asset asynchronously. 
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.Unload">
            <summary>
            Unloads the asset.
            </summary>
        </member>
        <member name="M:Delight.AssetObject`1.GetUnityObject">
            <summary>
            Gets unity object.
            </summary>
        </member>
        <member name="T:Delight.AtomicBindableObject">
            <summary>
            Base class for atomic bindable objects. These are objects that can change internally and be considered "new" objects as they do.
            </summary>
        </member>
        <member name="T:Delight.AttachedProperty`1">
            <summary>
            Base class for attached properties. Attached properties allows values to be associated with views, e.g. <Label Grid.Cell="1,1" /> tells the parent Grid which cell the label should be in.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.#ctor(Delight.BindableObject,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.SetValue(System.Object,`0)">
            <summary>
            Sets attached value and notifies parent.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.GetValue(System.Object)">
            <summary>
            Gets attached property value.
            </summary>
        </member>
        <member name="M:Delight.AttachedProperty`1.TryGetValue(System.Object,`0@)">
            <summary>
            Tries getting attached property value.
            </summary>
        </member>
        <member name="T:Delight.AutoSize">
            <summary>
            Enum indicating view auto size mode.
            </summary>
        </member>
        <member name="T:Delight.BindableCollection`1">
            <summary>
            Base class for bindable generic collections. Bindable collections notifies observers when the collection changes and enables e.g. the List view to update when items are added.
            </summary>
        </member>
        <member name="M:Delight.BindableCollection`1.Find(System.Predicate{`0})">
            <summary>
            Returns first item matching the predicate.
            </summary>
        </member>
        <member name="M:Delight.BindableCollection`1.ToList">
            <summary>
            Gets list from bindable collection.
            </summary>
        </member>
        <member name="T:Delight.BindableCollection">
            <summary>
            Base class for bindable collections. Bindable collections notifies observers when the collection changes and enables e.g. the List view to update when items are added.
            </summary>
        </member>
        <member name="M:Delight.BindableCollection.OnCollectionChanged(Delight.CollectionChangedEventArgs)">
            <summary>
            Notifies listeners that collection has been changed.
            </summary>
        </member>
        <member name="T:Delight.BindableCollectionSubset`1">
            <summary>
            Contains a subset of items from a parent bindable collection. It's automatically updated when the parent collection changes and allows for things like filtered collections. 
            </summary>
        </member>
        <member name="M:Delight.BindableCollectionSubset`1.ParentCollectionChanged(System.Object,Delight.CollectionChangedEventArgs)">
            <summary>
            Called when the parent collection has been modified. 
            </summary>
        </member>
        <member name="M:Delight.BindableCollectionSubset`1.UpdateData">
            <summary>
            Updates collection if necessary.
            </summary>
        </member>
        <member name="T:Delight.BindableObject">
            <summary>
            Base class for bindable objects. Bindable objects notifies observers when their properties changes which allows for values to be propagated and bindings and UI to update as data changes. 
            </summary>
        </member>
        <member name="M:Delight.BindableObject.#ctor">
            <summary>
            Initializes a new instance of the class. 
            </summary>
        </member>
        <member name="M:Delight.BindableObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class. 
            </summary>
        </member>
        <member name="M:Delight.BindableObject.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets property and notifies listeners if value has been changed.
            </summary>
        </member>
        <member name="M:Delight.BindableObject.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property has been changed.
            </summary>
        </member>
        <member name="T:Delight.Binding">
            <summary>
            Represents a data-binding (single or multi-binding). 
            </summary>
        </member>
        <member name="M:Delight.Binding.#ctor(System.Collections.Generic.List{Delight.BindingPath},Delight.BindingPath,System.Action,System.Action,System.Boolean)">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.Binding.UpdateBinding(System.Boolean)">
            <summary>
            Updates the binding and propagates it. 
            </summary>
        </member>
        <member name="T:Delight.BindingPath">
            <summary>
            Represents a binding target or source. 
            </summary>
        </member>
        <member name="M:Delight.BindingPath.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Func{Delight.BindableObject}})">
            <summary>
            Creates a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.BindingPath.PropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property in the binding sources has been changed.
            </summary>
        </member>
        <member name="T:Delight.CollectionChangeAction">
            <summary>
            Enum indicating how the collection has changed.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Add">
            <summary>
            Item added to collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.AddRange">
            <summary>
            Items added to collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Remove">
            <summary>
            Item removed from collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.RemoveRange">
            <summary>
            Items removed from collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Replace">
            <summary>
            All items in collection replaced with new set of items.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Clear">
            <summary>
            All items cleared from collection.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.ScrollTo">
            <summary>
            Scroll to specified item.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Select">
            <summary>
            Selects the specified item.
            </summary>
        </member>
        <member name="F:Delight.CollectionChangeAction.Batch">
            <summary>
            Batch of actions performed.
            </summary>
        </member>
        <member name="T:Delight.CollectionChangedEventArgs">
            <summary>
            Contains arguments for the collection changed event.
            </summary>
        </member>
        <member name="T:Delight.CollectionSelectionEventArgs">
            <summary>
            Contains arguments for the collection selection event.
            </summary>
        </member>
        <member name="T:Delight.BatchedCollectionChangedEventArgs">
            <summary>
            Contains a batch of collection changed event arguments.
            </summary>
        </member>
        <member name="T:Delight.ContentTemplate">
            <summary>
            Represent a content template. Contains an activator used to instantiate the template. Created in generated code-behind for certain views such as the List view if it has content, which is then used to create dynamic list items.
            </summary>
        </member>
        <member name="T:Delight.ContentTemplateData">
            <summary>
            Content template data. Contains information about data associated with an instantiated content template. 
            </summary>
        </member>
        <member name="T:Delight.DataProvider`1">
            <summary>
            Generic base class for data providers. Provides access to bindable objects of a certain type.
            </summary>
        </member>
        <member name="T:Delight.DependencyObject">
            <summary>
            Base class for dependency objects. Dependency objects contains the information about the object that dependency properties need.
            </summary>
        </member>
        <member name="P:Delight.DependencyObject.Template">
            <summary>
            Gets dependency object data template.
            </summary>
        </member>
        <member name="P:Delight.DependencyObject.State">
            <summary>
            Gets dependency object state.
            </summary>
        </member>
        <member name="M:Delight.DependencyObject.OnPropertyChanged(System.Object,System.String)">
            <summary>
            Called when a property has been changed. 
            </summary>
        </member>
        <member name="M:Delight.DependencyObject.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.DependencyObject.#ctor(System.String,Delight.Template)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.DependencyProperty`1">
            <summary>
            Dependency property. A dependency property manages the property values of dependency objects (views). Contains information about a property, its default values, various states, and property changed handlers attached.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.GetValue(Delight.DependencyObject)">
            <summary>
            Gets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetValue(Delight.DependencyObject,`0,System.Boolean)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.AttachPropertyChangedHandler(Delight.DependencyObject,`0)">
            <summary>
            Attaches property changed handler. 
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.OnAssetChanged(Delight.DependencyObject)">
            <summary>
            Called when asset has changed. 
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.DetachPropertyChangedHandler(Delight.DependencyObject,`0)">
            <summary>
            Detaches property changed handler from the object.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.Load(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.LoadAsync(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.Unload(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been unloaded. Clears run-time values for the specified instance.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.IsUndefined(Delight.DependencyObject,System.Boolean)">
            <summary>
            Checks if dependency property value is undefined (no run-time or default value set). Mainly used check if values of non-nullable types has been set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.GetDefault(Delight.DependencyObject)">
            <summary>
            Gets default value from type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.TryGetDefault(Delight.DependencyObject,`0@)">
            <summary>
            Gets default value if it exist.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.TryGetStateDefault(Delight.DependencyObject,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.TryGetStateDefault(Delight.Template,System.String,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetDefault(Delight.Template,`0)">
            <summary>
            Sets default value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetStateDefault(System.String,Delight.Template,`0)">
            <summary>
            Sets default state value for type.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.HasState(Delight.Template)">
            <summary>
            Returns boolean indicating if dependency property has any state values set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.HasState(Delight.Template,System.String)">
            <summary>
            Returns boolean indicating if dependency property has state value set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.HasBinding(Delight.DependencyObject)">
            <summary>
            Checks if property is bound.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.SetHasBinding(Delight.Template,System.Boolean)">
            <summary>
            Sets boolean indicating if property is bound.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty`1.#ctor(System.String,System.Func{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.DependencyProperty">
            <summary>
            Base class for dependency properties.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.Load(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded. Used e.g. by mapped dependency properties to propagate initial values.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.LoadAsync(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been loaded. Used e.g. by mapped dependency properties to propagate initial values.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.Unload(Delight.DependencyObject)">
            <summary>
            Called when the dependency object has been unloaded.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.HasState(Delight.Template)">
            <summary>
            Returns boolean indicating if dependency property has any state values set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.HasState(Delight.Template,System.String)">
            <summary>
            Returns boolean indicating if dependency property has value set for the specified state.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.IsUndefined(Delight.DependencyObject,System.Boolean)">
            <summary>
            Checks if dependency property value is undefined (no run-time or default value set). Mainly used check if values of non-nullable types has been set.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.HasBinding(Delight.DependencyObject)">
            <summary>
            Checks if property has binding.
            </summary>
        </member>
        <member name="M:Delight.DependencyProperty.SetHasBinding(Delight.Template,System.Boolean)">
            <summary>
            Sets boolean indicating if property has binding.
            </summary>
        </member>
        <member name="T:Delight.ElementAlignment">
            <summary>
            Enum indicating horizontal and vertical alignment of an element.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Center">
            <summary>
            Element centered horizontally and vertically.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Left">
            <summary>
            Element aligned to the left horizontally and centered vertically.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Top">
            <summary>
            Element aligned to the top vertically and centered horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Right">
            <summary>
            Element aligned to the right horizontally and centered vertically.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.Bottom">
            <summary>
            Element aligned to the bottom vertically and centered horizontally.
            </summary>       
        </member>
        <member name="F:Delight.ElementAlignment.TopLeft">
            <summary>
            Element aligned to the top vertically and to the left horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.TopRight">
            <summary>
            Element aligned to the top vertically and to the right horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.BottomLeft">
            <summary>
            Element aligned to the bottom vertically and to the left horizontally.
            </summary>
        </member>
        <member name="F:Delight.ElementAlignment.BottomRight">
            <summary>
            Alement aligned to the bottom vertically and to the right horizontally.
            </summary>
        </member>
        <member name="T:Delight.ElementMargin">
            <summary>
            Represents left, top, right and bottom margins or offset of an element.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize,Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.#ctor(Delight.ElementSize,Delight.ElementSize,Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.AttachListeners(Delight.AtomicBindableObject,Delight.AtomicBindableObject)">
            <summary>
            Attaches listeners to internal objects.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.OnInternalPropertyChanged(System.Object,System.String)">
            <summary>
            Called when an internal object changes.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromLeft(Delight.ElementSize)">
            <summary>
            Gets left margin from left size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromTop(Delight.ElementSize)">
            <summary>
            Gets top margin from top size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromRight(Delight.ElementSize)">
            <summary>
            Gets right margin from right size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.FromBottom(Delight.ElementSize)">
            <summary>
            Gets bottom margin from bottom size.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.ToString">
            <summary>
            Converts margin to string.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.Equals(System.Object)">
            <summary>
            Compares element margins.
            </summary>
        </member>
        <member name="M:Delight.ElementMargin.GetHashCode">
            <summary>
            Gets hashcode.
            </summary>
        </member>
        <member name="T:Delight.ElementOrientation">
            <summary>
            Enum indicating vertical or horizontal orientation of an element.
            </summary>
        </member>
        <member name="F:Delight.ElementOrientation.Vertical">
            <summary>
            Vertical element orientation.
            </summary>
        </member>
        <member name="F:Delight.ElementOrientation.Horizontal">
            <summary>
            Horizontal element orientation.
            </summary>
        </member>
        <member name="T:Delight.ElementSize">
            <summary>
            Represents size in pixels or percentage of an element. 
            </summary>
        </member>
        <member name="P:Delight.ElementSize.Pixels">
            <summary>
            Gets or sets element size in pixels.
            </summary>
        </member>
        <member name="P:Delight.ElementSize.Percent">
            <summary>
            Gets or sets element size in percents.
            </summary>
        </member>
        <member name="P:Delight.ElementSize.Proportion">
            <summary>
            Gets or sets element size in proportions.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.#ctor(System.Single,Delight.ElementSizeUnit)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="value">Size in pixels or percent. Percentages are specified in the range 0-1.</param>
            <param name="unit">Specifies if the size is in pixels or percents.</param>
        </member>
        <member name="M:Delight.ElementSize.#ctor(Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.op_Implicit(System.Single)~Delight.ElementSize">
            <summary>
            Converts float to element size.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.op_Implicit(Delight.ElementSize)~System.Single">
            <summary>
            Converts element size to float.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.FromPixels(System.Single)">
            <summary>
            Gets element size with the specified pixel size.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.FromPercents(System.Single)">
            <summary>
            Gets element size with the specified percent size (0.0 - 1.0).
            </summary>
        </member>
        <member name="M:Delight.ElementSize.FromProportion(System.Single)">
            <summary>
            Gets element size with the specified proportion.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.Parse(System.String)">
            <summary>
            Parses string into element size.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.ToString">
            <summary>
            Converts element size to string.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.Equals(System.Object)">
            <summary>
            Compares sizes.
            </summary>
        </member>
        <member name="M:Delight.ElementSize.GetHashCode">
            <summary>
            Gets hashcode.
            </summary>
        </member>
        <member name="T:Delight.ElementSizeUnit">
            <summary>
            Defines element size unit as pixels or percentage.
            </summary>
        </member>
        <member name="F:Delight.ElementSizeUnit.Pixels">
            <summary>
            Element size specified in pixels.
            </summary>
        </member>
        <member name="F:Delight.ElementSizeUnit.Percents">
            <summary>
            Element size specified in percents.
            </summary>
        </member>
        <member name="F:Delight.ElementSizeUnit.Proportional">
            <summary>
            Element size specified in proportion to other sizes.
            </summary>
        </member>
        <member name="T:Delight.ElementSortDirection">
            <summary>
            Enum indicating sort direction of an element.
            </summary>
        </member>
        <member name="F:Delight.ElementSortDirection.Ascending">
            <summary>
            Ascending element sort direction.
            </summary>
        </member>
        <member name="F:Delight.ElementSortDirection.Descending">
            <summary>
            Descending element sort direction.
            </summary>
        </member>
        <member name="T:Delight.ExtensionMethods">
            <summary>
            Extension methods. Contains extension methods used by the framework.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AfterInitializeInternal``1(``0)">
            <summary>
            Makes sure initializer is called only once per type. 
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Message(System.Exception)">
            <summary>
            Gets readable string from exception.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Gets attribute value from XML element.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetLineNumber(System.Xml.Linq.XElement)">
            <summary>
            Gets line number from XElement.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FieldTypeName(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Gets code printable name from field info.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FieldTypeName(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets code printable name from property info.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.TypeName(System.Type,System.Boolean)">
            <summary>
            Gets formatted name from type.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Appends line using format string.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AppendLine(System.Text.StringBuilder,System.Int32,System.String,System.Object[])">
            <summary>
            Appends line using format with indendation.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Append(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Appends string with indendation.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IIndexOf(System.String,System.String)">
            <summary>
            String.IndexOf ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ILastIndexOf(System.String,System.String)">
            <summary>
            String.LastIndexOf ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IEquals(System.String,System.String)">
            <summary>
            String.Equals ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IStartsWith(System.String,System.String)">
            <summary>
            String.StartsWith ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IContains(System.String,System.String)">
            <summary>
            String.Contains ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.IContains(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            List.Contains ignoring case.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.RemoveComments(System.String)">
            <summary>
            Removes comments from a line.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Same(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Compares two lists of strings are the same ignoring case by default.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Pluralize(System.String,System.String)">
            <summary>
            Pluralizes a table name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToPrivateMemberName(System.String)">
            <summary>
            Converts name of variable/property to private member name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToLocalVariableName(System.String)">
            <summary>
            Converts a variable/property to local variable name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToPropertyName(System.String)">
            <summary>
            Converts a name to property name.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetMemberInfo(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets member info (property or field) from a type.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets type from member info (property or field).
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AddEventTrigger(UnityEngine.GameObject,Delight.DependencyObject,Delight.ViewAction,UnityEngine.EventSystems.EventTriggerType)">
            <summary>
            Adds event trigger callback.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.HasFlag(System.Enum,System.Enum)">
            <summary>
            Checks if a flag enum has a flag value set.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets distinct elements from a list by some lambda expression.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForEach``1(Delight.View,System.Func{``0,System.Boolean},System.Boolean,Delight.DependencyObject,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view layout tree and performs an action on each child until the action returns false.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForEach``1(Delight.View,System.Action{``0},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on each child.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForThisAndEach``1(Delight.View,System.Action{``0},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and performs an action on this view and its children until the action returns false.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ForEachParent``1(Delight.View,System.Action{``0})">
            <summary>
            Performs an action on all ascendants of a view.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FindParent``1(Delight.View,System.Predicate{``0})">
            <summary>
            Returns first ascendant of type T found that matches the predicate.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.FindParent``1(Delight.View)">
            <summary>
            Returns first ascendant of type T found.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Find``1(Delight.View,System.Predicate{``0},System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Traverses the view object tree and returns the first view that matches the predicate.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Find``1(Delight.View,System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T found.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Find``1(Delight.View,System.String,System.Boolean,Delight.View,Delight.TraversalAlgorithm)">
            <summary>
            Returns first view of type T with the specified ID.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds range of items to hash-set.
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a value to specified range [min, max].
            </summary>
        </member>
        <member name="M:Delight.ExtensionMethods.ToBindableCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts enumerable to bindable collection.
            </summary>
        </member>
        <member name="T:Delight.IInitialize">
            <summary>
            Interface for ensuring initialize method is called once on object construction. 
            </summary>
        </member>
        <member name="T:Delight.INotifyCollectionChanged">
            <summary>
            Interface for collections notifying listeners the collection has been changed.
            </summary>
        </member>
        <member name="T:Delight.INotifyPropertyChanged">
            <summary>
            Interface for objects notifying listeners a property has been changed.
            </summary>
        </member>
        <member name="T:Delight.ItemSelectionActionData">
            <summary>
            Item selection action data.
            </summary>
        </member>
        <member name="T:Delight.ListChangeAction">
            <summary>
            Enum indicating type of list change action initiated.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Add">
            <summary>
            Items added to list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Rearranged">
            <summary>
            Items rearranged within list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Remove">
            <summary>
            Items removed from list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Replace">
            <summary>
            Items replaced in list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Clear">
            <summary>
            All items cleared from list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Modify">
            <summary>
            Items modified in list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.Select">
            <summary>
            Item selected in list.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.ScrollTo">
            <summary>
            Item scrolled to.
            </summary>
        </member>
        <member name="F:Delight.ListChangeAction.DynamicAdd">
            <summary>
            DynamicAdd.
            </summary>
        </member>
        <member name="T:Delight.ListChangedEventArgs">
            <summary>
            Contains arguments for the list changed event.
            </summary>
        </member>
        <member name="T:Delight.LoadMode">
            <summary>
            Enum indicating view load mode.
            </summary>
        </member>
        <member name="F:Delight.LoadMode.Automatic">
            <summary>
            View is loaded automatically when parent is loaded. 
            </summary>
        </member>
        <member name="F:Delight.LoadMode.Manual">
            <summary>
            View is loaded when explicitly requested to load by calling its Load method. 
            </summary>
        </member>
        <member name="F:Delight.LoadMode.HiddenWhileLoading">
            <summary>
            Makes view hidden while view and referenced assets are loading.
            </summary>
        </member>
        <member name="T:Delight.LocalizationLabel">
            <summary>
            Holds information about a localized label. Used by the localization mechanism. 
            </summary>
        </member>
        <member name="T:Delight.MappedAssetDependencyProperty`3">
            <summary>
            Dependency property that maps to a unity component asset. E.g. ImageComponent.sprite
            </summary>
        </member>
        <member name="M:Delight.MappedAssetDependencyProperty`3.OnAssetChanged(Delight.DependencyObject)">
            <summary>
            Called when asset has been changed. 
            </summary>
        </member>
        <member name="M:Delight.MappedAssetDependencyProperty`3.#ctor(System.String,System.Func{`2,`1},System.Action{`1,`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.MappedDependencyProperty`3">
            <summary>
            Dependency property that maps to another property or field like a unity component property. E.g. TextComponent.text. Stores no data on its own. 
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.GetValue(Delight.DependencyObject)">
            <summary>
            Gets mapped dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetValue(Delight.DependencyObject,`0)">
            <summary>
            Sets dependency property value for specified instance.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.IsUndefined(Delight.DependencyObject,System.Boolean)">
            <summary>
            Checks if dependency property value is undefined (no run-time or default value set). Mainly used check if values of non-nullable types has been set.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.GetDefault(Delight.DependencyObject)">
            <summary>
            Gets default value from type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.TryGetDefault(Delight.DependencyObject,`0@)">
            <summary>
            Gets default value if it exist.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.TryGetStateDefault(Delight.DependencyObject,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.TryGetStateDefault(Delight.Template,System.String,`0@)">
            <summary>
            Gets default state value if it exist.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetDefault(Delight.Template,`0)">
            <summary>
            Sets default value for type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.Load(Delight.DependencyObject)">
            <summary>
            Initializes the mapped dependency property.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.LoadAsync(Delight.DependencyObject)">
            <summary>
            Initializes the mapped dependency property.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.Unload(Delight.DependencyObject)">
            <summary>
            Clears run-time values for the specified instance.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetStateDefault(System.String,Delight.Template,`0)">
            <summary>
            Sets default state value for type.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.HasState(Delight.Template)">
            <summary>
            Returns boolean indicating if dependency property has any state values set.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.HasState(Delight.Template,System.String)">
            <summary>
            Returns boolean indicating if dependency property has state value set.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.HasBinding(Delight.DependencyObject)">
            <summary>
            Checks if property has binding.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.SetHasBinding(Delight.Template,System.Boolean)">
            <summary>
            Sets boolean indicating if property has binding.
            </summary>
        </member>
        <member name="M:Delight.MappedDependencyProperty`3.#ctor(System.String,System.Func{`2,`1},System.Func{`1,`0},System.Action{`1,`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.ModelObject">
            <summary>
            Base class for model objects.
            </summary>
        </member>
        <member name="T:Delight.RaycastTargetGraphic">
            <summary>
            Non-drawing graphic to provide raycast target without drawing anything.
            </summary>
        </member>
        <member name="T:Delight.OverflowMode">
            <summary>
            Enum indicating how items should overflow as they reach the boundaries.
            </summary>
        </member>
        <member name="F:Delight.OverflowMode.Overflow">
            <summary>
            Items can exceed the boundaries.
            </summary>
        </member>
        <member name="F:Delight.OverflowMode.Wrap">
            <summary>
            Items will wrap as they reach the boundaries.
            </summary>
        </member>
        <member name="T:Delight.RaycastBlockMode">
            <summary>
            Type of raycast blocking should be used.
            </summary>
        </member>
        <member name="F:Delight.RaycastBlockMode.Default">
            <summary>
            Raycast is blocked if view is displayed and not transparent.
            </summary>
        </member>
        <member name="F:Delight.RaycastBlockMode.Always">
            <summary>
            Raycast is always blocked.
            </summary>
        </member>
        <member name="F:Delight.RaycastBlockMode.Never">
            <summary>
            Raycast is never blocked.
            </summary>
        </member>
        <member name="T:Delight.ScrollbarVisibilityMode">
            <summary>
            Indicates when scrollbar should be shown. 
            </summary>
        </member>
        <member name="T:Delight.ScrollBounds">
            <summary>
            Determines how scrolling should be restricted. 
            </summary>
        </member>
        <member name="T:Delight.SemaphoreLocker">
            <summary>
            Class for locking an async operation.
            </summary>
        </member>
        <member name="T:Delight.ServerUriLocator">
            <summary>
            Defeault server uri locator. Uses URI specified in config or simulated URI if UseSimulatedUriInEditor is true.
            </summary>
        </member>
        <member name="T:Delight.StorageMode">
            <summary>
            Indicates if asset is stored locally or remote. 
            </summary>
        </member>
        <member name="T:Delight.SwitchMode">
            <summary>
            Enum indicating view switcher mode.
            </summary>
        </member>
        <member name="F:Delight.SwitchMode.Enable">
            <summary>
            Views start out preloaded and enabled/disabled when they are switched to/from
            </summary>
        </member>
        <member name="F:Delight.SwitchMode.Load">
            <summary>
            Views are loaded/unloaded when they are switched to/from.
            </summary>
        </member>
        <member name="F:Delight.SwitchMode.LoadOnce">
            <summary>
            Views are loaded first time when switched to and then enabled/disabled when switched to/from.
            </summary>
        </member>
        <member name="T:Delight.TabSelectionActionData">
            <summary>
            Tab selection action data.
            </summary>
        </member>
        <member name="T:Delight.Template">
            <summary>
            View data template. A data template is associated with a view type and allows for the framework to keep track of an hierarchy of default values. It allows for values in dependenc properties to be stored per type rather than instance.
            </summary>
        </member>
        <member name="M:Delight.Template.#ctor(Delight.Template)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:Delight.TraversalAlgorithm">
            <summary>
            Enum indicating what traversal algorithm to use.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.Default">
            <summary>
            Default traversal algorithm (depth first).
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.DepthFirst">
            <summary>
            Depth first traversal algorithm.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.BreadthFirst">
            <summary>
            Breadth first traversal algorithm.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.ReverseDepthFirst">
            <summary>
            Reverse depth first traversal algorithm.
            </summary>
        </member>
        <member name="F:Delight.TraversalAlgorithm.ReverseBreadthFirst">
            <summary>
            Reverse breadth first traversal algorithm.
            </summary>
        </member>
        <member name="T:Delight.TypeHelper">
            <summary>
            Helper methods for finding and instantiating objects through reflection.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.InitializeAssemblyTypes">
            <summary>
            Initializes the list of assembly types. 
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.FindDerivedTypes(System.Type)">
            <summary>
            Gets all types derived from specified base type.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Extension method for getting loadable types from an assembly.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.CreateInstance(System.Type)">
            <summary>
            Instiantiates a type.
            </summary>
        </member>
        <member name="M:Delight.TypeHelper.GetType(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Gets type with the specified name and namespace. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Delight.ValueConverter" -->
        <member name="T:Delight.ValueConverter`1">
            <summary>
            Generic base class for value converters.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ValueConverter`1.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ValueConverters">
            <summary>
            Helper class for value converters.
            </summary>
        </member>
        <member name="M:Delight.ValueConverters.GetInitializer(System.String,System.String)">
            <summary>
            Gets initializer from type name and string value.
            </summary>
        </member>
        <member name="T:Delight.AssetObjectValueConverter">
            <summary>
            Asset value converter.
            </summary>
        </member>
        <member name="M:Delight.AssetObjectValueConverter.GetInitializer(System.String,System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="T:Delight.BoolValueConverter">
            <summary>
            Bool value converter.
            </summary>
        </member>
        <member name="M:Delight.BoolValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.BoolValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.BoolValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.CellIndexValueConverter">
            <summary>
            CellIndex value converter.
            </summary>
        </member>
        <member name="M:Delight.CellIndexValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.CellIndexValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.CellIndexValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ColorValueConverter">
            <summary>
            Color value converter.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.HexToColor(System.String)">
            <summary>
            Gets color from hex value.
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.RgbaToColor(System.String)">
            <summary>
            Gets color from float RGBA values (0-1)
            </summary>
        </member>
        <member name="M:Delight.ColorValueConverter.#cctor">
            <summary>
            Initializes a static instance of the class.
            </summary>
        </member>
        <member name="T:Delight.ColumnDefinitionsValueConverter">
            <summary>
            ColumnDefinitions value converter.
            </summary>
        </member>
        <member name="M:Delight.ColumnDefinitionsValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ColumnDefinitionsValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ColumnDefinitionsValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ElementMarginValueConverter">
            <summary>
            ElementMargin value converter.
            </summary>
        </member>
        <member name="M:Delight.ElementMarginValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ElementMarginValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ElementMarginValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ElementSizeValueConverter">
            <summary>
            ElementSize value converter.
            </summary>
        </member>
        <member name="M:Delight.ElementSizeValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.ElementSizeValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.ElementSizeValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.EnumValueConverter`1">
            <summary>
            Enum value converter.
            </summary>
        </member>
        <member name="M:Delight.EnumValueConverter`1.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.EnumValueConverter`1.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.EnumValueConverter`1.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.FloatValueConverter">
            <summary>
            Float value converter.
            </summary>
        </member>
        <member name="M:Delight.FloatValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.FloatValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.FloatValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.IntValueConverter">
            <summary>
            Int value converter.
            </summary>
        </member>
        <member name="M:Delight.IntValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.IntValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.IntValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.RowDefinitionsValueConverter">
            <summary>
            RowDefinitions value converter.
            </summary>
        </member>
        <member name="M:Delight.RowDefinitionsValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.RowDefinitionsValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.RowDefinitionsValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ScrollbarVisibilityConverter">
            <summary>
            ScrollbarVisibility converter.
            </summary>
        </member>
        <member name="T:Delight.SpriteAssetValueConverter">
            <summary>
            Sprite asset value converter.
            </summary>
        </member>
        <member name="M:Delight.SpriteAssetValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.SpriteAssetValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.SpriteAssetValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.StringValueConverter">
            <summary>
            String value converter.
            </summary>
        </member>
        <member name="M:Delight.StringValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.StringValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.StringValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.Vector2ValueConverter">
            <summary>
            Vector2 value converter.
            </summary>
        </member>
        <member name="M:Delight.Vector2ValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.Vector2ValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.Vector2ValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.Vector3ValueConverter">
            <summary>
            Vector3 value converter.
            </summary>
        </member>
        <member name="M:Delight.Vector3ValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.Vector3ValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.Vector3ValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.Vector4ValueConverter">
            <summary>
            Vector3 value converter.
            </summary>
        </member>
        <member name="M:Delight.Vector4ValueConverter.GetInitializer(System.String)">
            <summary>
            Gets initializer from string value.
            </summary>
        </member>
        <member name="M:Delight.Vector4ValueConverter.Convert(System.String)">
            <summary>
            Converts value from string.
            </summary>
        </member>
        <member name="M:Delight.Vector4ValueConverter.Convert(System.Object)">
            <summary>
            Converts value from object.
            </summary>
        </member>
        <member name="T:Delight.ViewAction">
            <summary>
            A view action keeps a list of action handlers and allows for easy enabling / disabling invoking them when the action is triggered.
            </summary>
        </member>
        <member name="M:Delight.ViewAction.ResolveActionHandler(System.Object,System.String,System.Func{System.Object}[])">
            <summary>
            Resolves action handler from name. 
            </summary>
        </member>
        <member name="T:Delight.ViewMethod">
            <summary>
            Contains information about a view method.
            </summary>
        </member>
        <member name="T:Delight.ViewPresenter">
            <summary>
            MonoBehavior for presenting a view in the scene. Used to e.g. create and load the main scene view.
            </summary>
        </member>
        <member name="M:Delight.ViewPresenter.Create">
            <summary>
            Instantiates the view to be presented.
            </summary>
        </member>
        <member name="T:Delight.VirtualItem">
            <summary>
            Represents a virtual item. Contains information about its size, offset and alignment. Used by virtualized lists to keep track of list items that are yet to be realized.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor(Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor(Delight.ElementSize,Delight.ElementSize)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.#ctor(Delight.ElementSize,Delight.ElementSize,Delight.ContentTemplate)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.FromWidth(Delight.ElementSize)">
            <summary>
            Gets element sizes from width.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.FromHeight(Delight.ElementSize)">
            <summary>
            Gets element sizes from height.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.ToString">
            <summary>
            Converts element sizes to string.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.Equals(System.Object)">
            <summary>
            Compares element sizes.
            </summary>
        </member>
        <member name="M:Delight.VirtualItem.GetHashCode">
            <summary>
            Gets hashcode.
            </summary>
        </member>
        <member name="T:Awaiters">
            <summary>
            Async Await Utility for Unity. Read more at: http://www.stevevermeulen.com/index.php/2017/09/23/using-async-await-in-unity3d-2017/
            </summary>
        </member>
        <member name="M:TMPro.Examples.SkewTextExample.WarpText">
            <summary>
             Method to curve text along a Unity animation curve.
            </summary>
            <param name="textComponent"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealCharacters(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one character at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealWords(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one word at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawCharactersBounds">
            <summary>
            Method to draw a rectangle around each character.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawWordBounds">
            <summary>
            Method to draw rectangles around each word of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLinkBounds">
            <summary>
            Draw rectangle around each of the links contained in the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLineBounds">
            <summary>
            Draw Rectangles around each lines of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawBounds">
            <summary>
            Draw Rectangle around the bounds of the text object.
            </summary>
        </member>
        <member name="M:TMPro.Examples.WarpTextExample.WarpText">
            <summary>
             Method to curve text along a Unity animation curve.
            </summary>
            <param name="textComponent"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexColorCycler.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TMPro.Examples.VertexJitter.VertexAnim">
            <summary>
            Structure to hold pre-computed animation data.
            </summary>
        </member>
        <member name="M:TMPro.Examples.VertexJitter.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeA.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeB.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexZoom.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TMPro.TMP_DigitValidator">
            <summary>
            EXample of a Custom Character Input Validator to only allow digits from 0 to 9.
            </summary>
        </member>
        <member name="T:TMPro.TMP_PhoneNumberValidator">
            <summary>
            Example of a Custom Character Input Validator to only allow phone number in the (800) 555-1212 format.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onCharacterSelection">
            <summary>
            Event delegate triggered when pointer is over a character.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onSpriteSelection">
            <summary>
            Event delegate triggered when pointer is over a sprite.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onWordSelection">
            <summary>
            Event delegate triggered when pointer is over a word.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onLineSelection">
            <summary>
            Event delegate triggered when pointer is over a line.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onLinkSelection">
            <summary>
            Event delegate triggered when pointer is over a link.
            </summary>
        </member>
    </members>
</doc>
